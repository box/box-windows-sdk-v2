using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Box.V2.Models
{
    /// <summary>
    /// A standard representation of a sign request, as returned from any Box Sign API endpoints by default.
    /// </summary>
    public class BoxSignRequest : BoxEntity
    {
        public const string FieldAreRemindersEnabled = "are_reminders_enabled";
        public const string FieldTextSignaturesEnabled = "are_text_signatures_enabled";
        public const string FieldAutoExpireAt = "auto_expire_at";
        public const string FieldDaysValid = "days_valid";
        public const string FieldEmailMessage = "email_message";
        public const string FieldEmailSubject = "email_subject";
        public const string FieldExternalId = "external_id";
        public const string FieldIsDocumentPreparationNeeded = "is_document_preparation_needed";
        public const string FieldParentFolder = "parent_folder";
        public const string FieldPrefillTags = "prefill_tags";
        public const string FieldPrepareUrl = "prepare_url";
        public const string FieldSignFiles = "sign_files";
        public const string FieldSigners = "signers";
        public const string FieldSigningLog = "signing_log";
        public const string FieldSourceFiles = "source_files";
        public const string FieldStatus = "status";
        public const string FieldDeclinedRedirectUrl = "declined_redirect_url";
        public const string FieldRedirectUrl = "redirect_url";
        public const string FieldTemplateId = "template_id";

        /// <summary>
        /// Reminds signers to sign a document on day 3, 8, 13 and 18. Reminders are only sent to outstanding signers.
        /// </summary>
        [JsonProperty(PropertyName = FieldAreRemindersEnabled)]
        public virtual bool AreRemindersEnabled { get; private set; }

        /// <summary>
        /// Disables the usage of signatures generated by typing (text).
        /// </summary>
        [JsonProperty(PropertyName = FieldTextSignaturesEnabled)]
        public virtual bool AreTextSignaturesEnabled { get; private set; }

        /// <summary>
        /// Uses days_valid to calculate the date and time, in GMT, the sign request will expire if unsigned.
        /// </summary>
        [JsonProperty(PropertyName = FieldAutoExpireAt)]
        public virtual DateTimeOffset? AutoExpireAt { get; private set; }

        /// <summary>
        /// Number of days after which this request will automatically expire if not completed.
        /// </summary>
        [JsonProperty(PropertyName = FieldDaysValid)]
        public virtual int? DaysValid { get; private set; }

        /// <summary>
        /// Message to include in sign request email. The field is cleaned through sanitization of specific characters.
        /// However, some html tags are allowed. Links included in the message are also converted to hyperlinks in the email.
        /// The message may contain the following html tags including a, abbr, acronym, b, blockquote, code, em, i, ul, li, ol, and strong.
        /// Be aware that when the text to html ratio is too high, the email may end up in spam filters. Custom styles on these tags are not allowed.
        /// If this field is not passed, a default message will be used.
        /// </summary>
        [JsonProperty(PropertyName = FieldEmailMessage)]
        public virtual string EmailMessage { get; private set; }

        /// <summary>
        /// Subject of sign request email.This is cleaned by sign request.If this field is not passed, a default subject will be used.
        /// </summary>
        [JsonProperty(PropertyName = FieldEmailSubject)]
        public virtual string EmailSubject { get; private set; }

        /// <summary>
        /// This can be used to reference an ID in an external system that the sign request is related to.
        /// </summary>
        [JsonProperty(PropertyName = FieldExternalId)]
        public virtual string ExternalId { get; private set; }

        /// <summary>
        /// Indicates if the sender should receive a prepare_url in the response to complete document preparation via UI.
        /// </summary>
        [JsonProperty(PropertyName = FieldIsDocumentPreparationNeeded)]
        public virtual bool IsDocumentPreparationNeeded { get; private set; }

        /// <summary>
        /// The destination folder to place final, signed document and signing log. Only ID and type fields are required. The root folder, folder ID 0, cannot be used.
        /// </summary>
        [JsonProperty(PropertyName = FieldParentFolder)]
        public virtual BoxFolder ParentFolder { get; private set; }

        /// <summary>
        /// When a document contains sign related tags in the content, you can prefill them using this prefill_tags by referencing the 'id' of the tag as the external_id field of the prefill tag.
        /// </summary>
        [JsonProperty(PropertyName = FieldPrefillTags)]
        public virtual List<BoxSignRequestPrefillTag> PrefillTags { get; private set; }

        /// <summary>
        /// This URL is returned if is_document_preparation_needed is set to true in the request. It is used to prepare the sign request via UI. The sign request is not sent until preparation is complete.
        /// </summary>
        [JsonProperty(PropertyName = FieldPrepareUrl)]
        public virtual Uri PrepareUrl { get; private set; }

        /// <summary>
        /// List of files that will be signed, which are copies of the original source files. A new version of these files are created as signers sign and can be downloaded at any point in the signing process.
        /// </summary>
        [JsonProperty(PropertyName = FieldSignFiles)]
        public virtual BoxSignRequestSignFiles SignFiles { get; private set; }

        /// <summary>
        /// Array of signers for the sign request.
        /// </summary>
        [JsonProperty(PropertyName = FieldSigners)]
        public virtual List<BoxSignRequestSigner> Signers { get; private set; }

        /// <summary>
        /// Reference to a file that holds a log of all signer activity for the request.
        /// </summary>
        [JsonProperty(PropertyName = FieldSigningLog)]
        public virtual BoxFile SigningLog { get; private set; }

        /// <summary>
        /// List of files to create a signing document from. This is currently limited to ten files. Only the ID and type fields are required for each file.
        /// </summary>
        [JsonProperty(PropertyName = FieldSourceFiles)]
        public virtual List<BoxFile> SourceFiles { get; private set; }

        /// <summary>
        /// Describes the status of the sign request.
        /// </summary>
        [JsonProperty(PropertyName = FieldStatus)]
        [JsonConverter(typeof(StringEnumConverter))]
        public virtual BoxSignRequestStatus Status { get; private set; }

        /// <summary>
        /// URL to redirect the signer to if they decline to sign the document.
        /// </summary>
        [JsonProperty(PropertyName = FieldDeclinedRedirectUrl)]
        public virtual Uri DeclinedRedirectUrl { get; private set; }

        /// <summary>
        /// URL to redirect the signer to after they sign the document.
        /// </summary>
        [JsonProperty(PropertyName = FieldRedirectUrl)]
        public virtual Uri RedirectUrl { get; private set; }

        /// <summary>
        /// The ID of the template that was used to create this sign request.
        /// </summary>
        [JsonProperty(PropertyName = FieldTemplateId)]
        public virtual string TemplateId { get; private set; }
    }

    /// <summary>
    /// Describes the status of the sign request.
    /// </summary>
    public enum BoxSignRequestStatus
    {
        converting,
        created,
        sent,
        viewed,
        signed,
        cancelled,
        declined,
        error_converting,
        error_sending,
        expired,
        downloaded,
        [EnumMember(Value = "signed and downloaded")]
        signed_and_downloaded,
        finalizing,
        error_finalizing
    }
}
