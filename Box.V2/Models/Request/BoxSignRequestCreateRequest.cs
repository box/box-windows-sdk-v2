using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Box.V2.Models.Request
{
    /// <summary>
    /// Used to create a sign request. This involves preparing a document for signing and sending the sign request to signers.
    /// </summary>
    public class BoxSignRequestCreateRequest
    {
        /// <summary>
        /// Reminds signers to sign a document on day 3, 8, 13 and 18. Reminders are only sent to outstanding signers.
        /// </summary>
        [JsonProperty(PropertyName = "are_reminders_enabled")]
        public bool? AreRemindersEnabled { get; set; }

        /// <summary>
        /// Disables the usage of signatures generated by typing (text).
        /// </summary>
        [JsonProperty(PropertyName = "are_text_signatures_enabled")]
        public bool? AreTextSignaturesEnabled { get; set; }

        /// <summary>
        /// Number of days after which this request will automatically expire if not completed.
        /// </summary>
        [JsonProperty(PropertyName = "days_valid")]
        public int? DaysValid { get; set; }

        /// <summary>
        /// Message to include in sign request email. The field is cleaned through sanitization of specific characters.
        /// However, some html tags are allowed. Links included in the message are also converted to hyperlinks in the email.
        /// The message may contain the following html tags including a, abbr, acronym, b, blockquote, code, em, i, ul, li, ol, and strong.
        /// Be aware that when the text to html ratio is too high, the email may end up in spam filters. Custom styles on these tags are not allowed.
        /// If this field is not passed, a default message will be used.
        /// </summary>
        [JsonProperty(PropertyName = "email_message")]
        public string EmailMessage { get; set; }

        /// <summary>
        /// Subject of sign request email. This is cleaned by sign request. If this field is not passed, a default subject will be used.
        /// </summary>
        [JsonProperty(PropertyName = "email_subject")]
        public string EmailSubject { get; set; }

        /// <summary>
        /// This can be used to reference an ID in an external system that the sign request is related to.
        /// </summary>
        [JsonProperty(PropertyName = "external_id")]
        public string ExternalId { get; set; }

        /// <summary>
        /// Indicates if the sender should receive a prepare_url in the response to complete document preparation via UI.
        /// </summary>
        [JsonProperty(PropertyName = "is_document_preparation_needed")]
        public bool? IsDocumentPreparationNeeded { get; set; }

        /// <summary>
        /// The destination folder to place final, signed document and signing log. Only ID and type fields are required. The root folder, folder ID 0, cannot be used.
        /// </summary>
        [JsonProperty(PropertyName = "parent_folder")]
        public BoxRequestEntity ParentFolder { get; set; }

        /// <summary>
        /// When a document contains sign related tags in the content, you can prefill them using this prefill_tags by referencing the 'id' of the tag as the external_id field of the prefill tag.
        /// </summary>
        [JsonProperty(PropertyName = "prefill_tags")]
        public List<BoxSignRequestPrefillTag> PrefillTags { get; set; }

        /// <summary>
        /// List of signers for the sign request. 35 is the max number of signers permitted.
        /// </summary>
        [JsonProperty(PropertyName = "signers")]
        public List<BoxSignRequestSignerCreate> Signers { get; set; }

        /// <summary>
        /// List of files to create a signing document from. This is currently limited to ten files. Only the ID and type fields are required for each file.
        /// </summary>
        [JsonProperty(PropertyName = "source_files")]
        public List<BoxSignRequestCreateSourceFile> SourceFiles { get; set; }

        /// <summary>
        /// URL to redirect the signer to if they decline to sign the document.
        /// </summary>
        [JsonProperty(PropertyName = "declined_redirect_url")]
        public Uri DeclinedRedirectUrl { get; set; }

        /// <summary>
        /// URL to redirect the signer to after they sign the document.
        /// </summary>
        [JsonProperty(PropertyName = "redirect_url")]
        public Uri RedirectUrl { get; set; }

        /// <summary>
        /// The ID of sign template to use to create the sign request.
        /// </summary>
        [JsonProperty(PropertyName = "template_id")]
        public string TemplateId { get; set; }
    }

    /// <summary>
    /// List of files to create a signing document from. This is currently limited to ten files. Only the ID and type fields are required for each file.
    /// </summary>
    public class BoxSignRequestCreateSourceFile
    {
        /// <summary>
        /// The unique identifier that represent a file.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Value is always file.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type => "file";

        /// <summary>
        /// The information about the current version of the file.
        /// </summary>
        [JsonProperty(PropertyName = "file_version")]
        public BoxSignRequestCreateSourceFileVersion FileVersion { get; set; }
    }

    /// <summary>
    /// The information about the current version of the file.
    /// </summary>
    public class BoxSignRequestCreateSourceFileVersion
    {
        /// <summary>
        /// The unique identifier that represent a file version.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Value is always file_version.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type => "file_version";
    }

    /// <summary>
    /// Signers for the sign request. 35 is the max number of signers permitted.
    /// </summary>
    public class BoxSignRequestSignerCreate
    {
        /// <summary>
        /// Email address of the signer.
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// User ID for the signer in an external application responsible for authentication when accessing the embed URL.
        /// </summary>
        [JsonProperty(PropertyName = "embed_url_external_user_id")]
        public string EmbedUrlExternalUserId { get; set; }

        /// <summary>
        /// Used in combination with an embed URL for a sender. After the sender signs, they will be redirected to the next in_person signer.
        /// </summary>
        [JsonProperty(PropertyName = "is_in_person")]
        public bool? IsInPerson { get; set; }

        /// <summary>
        /// Order of the signer.
        /// </summary>
        [JsonProperty(PropertyName = "order")]
        public int? Order { get; set; }

        /// <summary>
        /// Defines the role of the signer in the sign request. A signer must sign the document and an approver must approve the document.
        /// A final_copy_reader only receives the final signed document and signing log.
        /// Value is one of signer,approver,final_copy_reader
        /// </summary>
        [JsonProperty(PropertyName = "role")]
        [JsonConverter(typeof(StringEnumConverter))]
        public BoxSignRequestSignerRole? Role { get; set; }

        /// <summary>
        /// The URL to redirect the signer to if they decline to sign the document.
        /// </summary>
        [JsonProperty(PropertyName = "declined_redirect_url")]
        public Uri DeclinedRedirectUrl { get; set; }

        /// <summary>
        /// The URL to redirect the signer to after they sign the document.
        /// </summary>
        [JsonProperty(PropertyName = "redirect_url")]
        public Uri RedirectUrl { get; set; }

        /// <summary>
        /// If set to true, signer will need to login to a Box account before signing the request.
        /// If the signer does not have an existing account, they will have an option to create a free Box account.
        /// </summary>
        [JsonProperty(PropertyName = "login_required")]
        public bool? LoginRequired { get; set; }

        /// <summary>
        /// If set, the signer is required to enter the password before they are able to sign a document. This field is write only.
        /// </summary>
        [JsonProperty(PropertyName = "password")]
        public string Password { get; set; }

        /// <summary>
        /// If set, signers who have the same group ID will be assigned to the same input.
        /// A signer group is expected to have more than one signer.
        /// When a group contains fewer than two signers, it will be converted to a single signer and the group will be removed.
        /// </summary>
        [JsonProperty(PropertyName = "signer_group_id")]
        public string SignerGroupId { get; set; }

        /// <summary>
        /// If set, this phone number is be used to verify the signer via two factor authentication before they are able to sign the document.
        /// </summary>
        [JsonProperty(PropertyName = "verification_phone_number")]
        public string VerificationPhoneNumber { get; set; }
    }
}
